{"remainingRequest":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/lagoon/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/lagoon/src/components/ColumnList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/lagoon/src/components/ColumnList.vue","mtime":1563368862838},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/lagoon/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/lagoon/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/lagoon/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"column-list\",\n  data: function() {\n    return {\n      table_name: \"\",\n      column_list: [],\n      data_types: [\"integer\", \"varchar\", \"boolean\", \"blob\", \"timestamp\"],\n      gen_types: [\"incremental\", \"random\"],\n      collection: [\"range\", \"select\"],\n      output_num: 100,\n      output_data: []\n    };\n  },\n  methods: {\n    //カラムを追加する\n    add_column: function() {\n      console.log(this.data_types);\n      this.column_list.push({\n        column_name: \"\",\n        data_type: \"integer\",\n        gen_type: \"incremental\",\n        collection: \"range\",\n        num_of_times: 1,\n        min: \"1\",\n        max: \"100\",\n        not_null: false,\n        primary_key: false,\n        selection_items: []\n      });\n      console.log(this.column_list.length);\n    },\n    //カラムを削除する\n    delete_column: function(event) {\n      console.log(\"event id = \" + event.target.id);\n      this.column_list.splice(event.target.id, 1);\n    },\n    //ダウンロードするSQLファイルを生成する\n    generate_sql_file: function() {\n      var sql_stmt = this.create_sql_stmt();\n      let blob = new Blob([sql_stmt], { type: \"text/sql\" });\n      let link = document.createElement(\"a\");\n      link.href = window.URL.createObjectURL(blob);\n      link.download = \"create_data.sql\";\n      link.click();\n    },\n    //テストデータを生成するSQLを生成\n    create_sql_stmt: function() {\n      var sql_stmts = [];\n      var current_vals = {};\n      var sql_str = \"\";\n      var column_list = [];\n      //現在値と残りの繰り返し回数を保存しておく\n      this.column_list.forEach(element => {\n        if (element.data_type !== \"timestamp\") {\n          current_vals[element.column_name] = {\n            current_val: element.min,\n            num_of_times: element.num_of_times\n          };\n        } else {\n          let current_val = Date.parse(element.min.replace(/-/g, \"/\")) / 1000;\n          current_vals[element.column_name] = {\n            current_val: current_val,\n            num_of_times: element.num_of_times\n          };\n        }\n        column_list.push(element.column_name);\n      });\n\n      var column_str = column_list.join(\", \");\n\n      for (var i = 0; i < this.output_num; i++) {\n        let val_list = [];\n        let line =\n          \"INSERT INTO \" + this.table_name + \"(\" + column_str + \") VALUES (\";\n        this.column_list.forEach(el => {\n          var str_val = this.convert_to_sql_val(\n            current_vals[el.column_name][\"current_val\"],\n            el.data_type\n          );\n          val_list.push(str_val);\n          current_vals[el.column_name][\"current_val\"] = this.get_next_val(\n            current_vals[el.column_name][\"current_val\"],\n            el.data_type,\n            el.gen_type,\n            el.min,\n            el.max,\n            Number(el.num_of_times),\n            selection_items\n          );\n        });\n        var val_str = val_list.join(\", \");\n        line += val_str;\n        console.log(line);\n        line += \");\\n\";\n        sql_str += line;\n      }\n      return sql_str;\n    },\n    convert_to_sql_val: function(current_val, data_type) {\n      if (data_type == \"integer\") {\n        return String(current_val);\n      } else if (data_type == \"varchar\") {\n        if (Number.isInteger(current_val)) {\n          return \"'\" + \"test\" + String(current_val) + \"'\";\n        } else {\n          return \"'\" + current_val + \"'\";\n        }\n      } else if (data_type == \"boolean\") {\n        return \"'\" + String(current_val) + \"'\";\n      } else if (data_type == \"timestamp\") {\n        var d = new Date(current_val * 1000);\n        var year = d.getFullYear();\n        var month = d.getMonth() + 1;\n        var day = d.getDate();\n        var hour = d.getHours() < 10 ? \"0\" + d.getHours() : d.getHours();\n        var min = d.getMinutes() < 10 ? \"0\" + d.getMinutes() : d.getMinutes();\n        var sec = d.getSeconds() < 10 ? \"0\" + d.getSeconds() : d.getSeconds();\n        return (\n          \"'\" +\n          year +\n          \"-\" +\n          month +\n          \"-\" +\n          day +\n          \" \" +\n          hour +\n          \":\" +\n          min +\n          \":\" +\n          sec +\n          \"'\"\n        );\n      } else if (data_type == \"blob\") {\n      }\n    },\n    get_next_val: function(\n      current_val,\n      data_type,\n      gen_type,\n      collection,\n      min,\n      max,\n      num_of_times,\n      selection_items\n    ) {\n      if (collection == \"select\") {\n        if (gen_type == \"random\") {\n          //indexは使わない\n          return {\n            val: selection_items[Math.floor(Math.random() * (max - min)) + min],\n            index: -1\n          };\n        } else if (gen_type == \"incremental\") {\n          if (index + 1 == selection_items.length) {\n            index = 0;\n          }\n          return { val: selection_items[index], index: index };\n        }\n      }\n      if (data_type == \"integer\") {\n        min = Number(min);\n        max = Number(max);\n        if (gen_type == \"random\") {\n          console.log(\"aaa:\" + Math.random());\n          return Math.floor(Math.random() * (max - min)) + min;\n        } else if (gen_type == \"incremental\") {\n          return Number(current_val) + 1;\n        }\n      } else if (data_type == \"varchar\") {\n        min = Number(min);\n        max = Number(max);\n        if (gen_type == \"random\") {\n          var l = Math.floor(Math.random() * (max - min)) + min;\n          console.log(\"length: \" + String(l));\n          var c =\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n          var cl = c.length;\n          var r = \"\";\n          for (var i = 0; i < l; i++) {\n            r += c[Math.floor(Math.random() * cl)];\n          }\n          return r;\n        } else if (gen_type == \"incremental\") {\n          return Number(current_val) + 1;\n        }\n      } else if (data_type == \"boolean\") {\n        if (gen_type == \"random\") {\n          return Math.random() < 0.5;\n        } else if (gen_type == \"incremental\") {\n          return !current_val;\n        }\n      } else if (data_type == \"timestamp\") {\n        console.log(current_val);\n        if (gen_type == \"random\") {\n          var ts_min = Date.parse(min.replace(/-/g, \"/\")) / 1000;\n          var ts_max = Date.parse(max.replace(/-/g, \"/\")) / 1000;\n          return Math.floor(Math.random() * (ts_max - ts_min)) + ts_min;\n        } else if (gen_type == \"incremental\") {\n          return current_val + 60;\n        }\n      } else if (data_type == \"blob\") {\n        return String(current_val);\n      } else {\n        return \"\";\n      }\n    },\n    is_not_select: function(gen_type) {\n      if (gen_type != \"select\") {\n        return true;\n      }\n      return false;\n    }\n    /*validate_num_of_times: function(num_of_times) {\n      return isNaN(num_of_times);\n    },\n    validate_min: function(data_type, min, max) {\n      if (!isNaN(min)) {\n        if (!isNaN(max)) {\n          if (Number(min) < Number(max)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    validate_max: function(data_type, min, max) {\n      if (!isNaN(max)) {\n        if (!isNaN(min)) {\n          if (Number(min) < Number(max)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    preview_output_data: function() {}*/\n  },\n  computed: {\n    update_data_type: function() {\n      this.column_list.forEach(element => {\n        console.log(\"watch\");\n        if (element.data_type == \"integer\") {\n          if (isNaN(element.min)) {\n            element.min = 1;\n          }\n          if (isNaN(element.max)) {\n            element.max = 100;\n          }\n        } else if (element.data_type == \"varchar\") {\n          if (isNaN(element.min)) {\n            element.min = 1;\n          }\n          if (isNaN(element.max)) {\n            element.max = 100;\n          }\n        } else if (element.data_type == \"timestamp\") {\n          console.log(\"timestamp\");\n          if (Date.parse(element.min, \"yyyy/MM/dd HH:mm:ss\")) {\n            let d = new Date();\n            let year = d.getFullYear();\n            let month = d.getMonth() + 1;\n            let day = d.getDate();\n            let hour = \"00\";\n            let min = \"00\";\n            let sec = \"00\";\n            element.min =\n              year +\n              \"-\" +\n              month +\n              \"-\" +\n              day +\n              \" \" +\n              hour +\n              \":\" +\n              min +\n              \":\" +\n              sec;\n          }\n          if (Date.parse(element.max, \"yyyy/MM/dd HH:mm:ss\")) {\n            let d = new Date(element.min);\n            let year = d.getFullYear();\n            let month = d.getMonth() + 1;\n            let day = d.getDate();\n            let hour = \"00\";\n            let min = \"00\";\n            let sec = \"00\";\n            element.max =\n              year +\n              \"-\" +\n              month +\n              \"-\" +\n              day +\n              \" \" +\n              hour +\n              \":\" +\n              min +\n              \":\" +\n              sec;\n          }\n        }\n      });\n    },\n    update_collection: function() {}\n  },\n  to_timestamp: function(unix_time) {}\n};\n",{"version":3,"sources":["ColumnList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ColumnList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container fluid>\n    <v-slide-y-transition mode=\"out-in\">\n      <v-layout column wrap>\n        <v-text-field label=\"table name\" v-model=\"table_name\"></v-text-field>\n        <v-btn fab dark color=\"indigo\">\n          <v-icon dark @click=\"add_column\">add</v-icon>\n        </v-btn>\n        <div v-for=\"column in column_list\" :key=\"column.key\">\n          <v-layout row justify-space-bet>\n            <v-flex xs12 sm2 d-flex>\n              <v-text-field\n                label=\"column name\"\n                v-model=\"column.column_name\"\n              ></v-text-field>\n            </v-flex>\n            <v-flex xs12 sm2 d-flex>\n              <v-select\n                :items=\"data_types\"\n                v-model=\"column.data_type\"\n                v-on=\"update_data_type\"\n                label=\"data type\"\n                class=\"px-10\"\n              ></v-select>\n            </v-flex>\n            <v-flex xs12 sm2 d-flex>\n              <v-select\n                :items=\"gen_types\"\n                v-model=\"column.gen_type\"\n                label=\"output type\"\n                class=\"px-10\"\n              ></v-select>\n            </v-flex>\n            <v-flex xs12 sm2 d-flex>\n              <v-select\n                :items=\"collection\"\n                v-model=\"column.collection\"\n                v-on=\"update_collection\"\n                label=\"collection\"\n                class=\"px-10\"\n              ></v-select>\n            </v-flex>\n            <v-flex v-if=\"column.collection === 'select'\" d-flex>\n              <v-combobox\n                :items=\"collection_items\"\n                label=\"multiple select\"\n                multiple\n                small-chips\n              ></v-combobox>\n            </v-flex>\n            <v-flex v-if=\"column.collection === 'range'\">\n              <v-text-field\n                label=\"number of times\"\n                v-model=\"column.num_of_times\"\n              ></v-text-field>\n            </v-flex>\n            <v-flex v-if=\"column.collection === 'range'\">\n              <v-text-field label=\"min\" v-model=\"column.min\"></v-text-field>\n            </v-flex>\n            <v-flex v-if=\"column.collection === 'range'\">\n              <v-text-field label=\"max\" v-model=\"column.max\"></v-text-field>\n            </v-flex>\n            <!-- <v-checkbox label=\"not null\" v-model=\"column.not_null\"></v-checkbox>\n            <v-checkbox label=\"primary key\" v-model=\"column.primary_key\"></v-checkbox>-->\n            <v-btn fab dark color=\"indigo\">\n              <v-icon dark :id=\"key\" @click=\"delete_column($event)\"\n                >delete</v-icon\n              >\n            </v-btn>\n          </v-layout>\n        </div>\n        <v-text-field\n          label=\"output data num\"\n          v-model=\"output_num\"\n        ></v-text-field>\n        <v-layout justify-end>\n          <v-flex xs2>\n            <v-btn fab dark color=\"indigo\">\n              <v-icon dark v-on:click=\"generate_sql_file\"\n                >arrow_downward</v-icon\n              >\n            </v-btn>\n          </v-flex>\n        </v-layout>\n        <div v-for=\"column in column_list\" :key=\"column.key\"></div>\n      </v-layout>\n    </v-slide-y-transition>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  name: \"column-list\",\n  data: function() {\n    return {\n      table_name: \"\",\n      column_list: [],\n      data_types: [\"integer\", \"varchar\", \"boolean\", \"blob\", \"timestamp\"],\n      gen_types: [\"incremental\", \"random\"],\n      collection: [\"range\", \"select\"],\n      output_num: 100,\n      output_data: []\n    };\n  },\n  methods: {\n    //カラムを追加する\n    add_column: function() {\n      console.log(this.data_types);\n      this.column_list.push({\n        column_name: \"\",\n        data_type: \"integer\",\n        gen_type: \"incremental\",\n        collection: \"range\",\n        num_of_times: 1,\n        min: \"1\",\n        max: \"100\",\n        not_null: false,\n        primary_key: false,\n        selection_items: []\n      });\n      console.log(this.column_list.length);\n    },\n    //カラムを削除する\n    delete_column: function(event) {\n      console.log(\"event id = \" + event.target.id);\n      this.column_list.splice(event.target.id, 1);\n    },\n    //ダウンロードするSQLファイルを生成する\n    generate_sql_file: function() {\n      var sql_stmt = this.create_sql_stmt();\n      let blob = new Blob([sql_stmt], { type: \"text/sql\" });\n      let link = document.createElement(\"a\");\n      link.href = window.URL.createObjectURL(blob);\n      link.download = \"create_data.sql\";\n      link.click();\n    },\n    //テストデータを生成するSQLを生成\n    create_sql_stmt: function() {\n      var sql_stmts = [];\n      var current_vals = {};\n      var sql_str = \"\";\n      var column_list = [];\n      //現在値と残りの繰り返し回数を保存しておく\n      this.column_list.forEach(element => {\n        if (element.data_type !== \"timestamp\") {\n          current_vals[element.column_name] = {\n            current_val: element.min,\n            num_of_times: element.num_of_times\n          };\n        } else {\n          let current_val = Date.parse(element.min.replace(/-/g, \"/\")) / 1000;\n          current_vals[element.column_name] = {\n            current_val: current_val,\n            num_of_times: element.num_of_times\n          };\n        }\n        column_list.push(element.column_name);\n      });\n\n      var column_str = column_list.join(\", \");\n\n      for (var i = 0; i < this.output_num; i++) {\n        let val_list = [];\n        let line =\n          \"INSERT INTO \" + this.table_name + \"(\" + column_str + \") VALUES (\";\n        this.column_list.forEach(el => {\n          var str_val = this.convert_to_sql_val(\n            current_vals[el.column_name][\"current_val\"],\n            el.data_type\n          );\n          val_list.push(str_val);\n          current_vals[el.column_name][\"current_val\"] = this.get_next_val(\n            current_vals[el.column_name][\"current_val\"],\n            el.data_type,\n            el.gen_type,\n            el.min,\n            el.max,\n            Number(el.num_of_times),\n            selection_items\n          );\n        });\n        var val_str = val_list.join(\", \");\n        line += val_str;\n        console.log(line);\n        line += \");\\n\";\n        sql_str += line;\n      }\n      return sql_str;\n    },\n    convert_to_sql_val: function(current_val, data_type) {\n      if (data_type == \"integer\") {\n        return String(current_val);\n      } else if (data_type == \"varchar\") {\n        if (Number.isInteger(current_val)) {\n          return \"'\" + \"test\" + String(current_val) + \"'\";\n        } else {\n          return \"'\" + current_val + \"'\";\n        }\n      } else if (data_type == \"boolean\") {\n        return \"'\" + String(current_val) + \"'\";\n      } else if (data_type == \"timestamp\") {\n        var d = new Date(current_val * 1000);\n        var year = d.getFullYear();\n        var month = d.getMonth() + 1;\n        var day = d.getDate();\n        var hour = d.getHours() < 10 ? \"0\" + d.getHours() : d.getHours();\n        var min = d.getMinutes() < 10 ? \"0\" + d.getMinutes() : d.getMinutes();\n        var sec = d.getSeconds() < 10 ? \"0\" + d.getSeconds() : d.getSeconds();\n        return (\n          \"'\" +\n          year +\n          \"-\" +\n          month +\n          \"-\" +\n          day +\n          \" \" +\n          hour +\n          \":\" +\n          min +\n          \":\" +\n          sec +\n          \"'\"\n        );\n      } else if (data_type == \"blob\") {\n      }\n    },\n    get_next_val: function(\n      current_val,\n      data_type,\n      gen_type,\n      collection,\n      min,\n      max,\n      num_of_times,\n      selection_items\n    ) {\n      if (collection == \"select\") {\n        if (gen_type == \"random\") {\n          //indexは使わない\n          return {\n            val: selection_items[Math.floor(Math.random() * (max - min)) + min],\n            index: -1\n          };\n        } else if (gen_type == \"incremental\") {\n          if (index + 1 == selection_items.length) {\n            index = 0;\n          }\n          return { val: selection_items[index], index: index };\n        }\n      }\n      if (data_type == \"integer\") {\n        min = Number(min);\n        max = Number(max);\n        if (gen_type == \"random\") {\n          console.log(\"aaa:\" + Math.random());\n          return Math.floor(Math.random() * (max - min)) + min;\n        } else if (gen_type == \"incremental\") {\n          return Number(current_val) + 1;\n        }\n      } else if (data_type == \"varchar\") {\n        min = Number(min);\n        max = Number(max);\n        if (gen_type == \"random\") {\n          var l = Math.floor(Math.random() * (max - min)) + min;\n          console.log(\"length: \" + String(l));\n          var c =\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n          var cl = c.length;\n          var r = \"\";\n          for (var i = 0; i < l; i++) {\n            r += c[Math.floor(Math.random() * cl)];\n          }\n          return r;\n        } else if (gen_type == \"incremental\") {\n          return Number(current_val) + 1;\n        }\n      } else if (data_type == \"boolean\") {\n        if (gen_type == \"random\") {\n          return Math.random() < 0.5;\n        } else if (gen_type == \"incremental\") {\n          return !current_val;\n        }\n      } else if (data_type == \"timestamp\") {\n        console.log(current_val);\n        if (gen_type == \"random\") {\n          var ts_min = Date.parse(min.replace(/-/g, \"/\")) / 1000;\n          var ts_max = Date.parse(max.replace(/-/g, \"/\")) / 1000;\n          return Math.floor(Math.random() * (ts_max - ts_min)) + ts_min;\n        } else if (gen_type == \"incremental\") {\n          return current_val + 60;\n        }\n      } else if (data_type == \"blob\") {\n        return String(current_val);\n      } else {\n        return \"\";\n      }\n    },\n    is_not_select: function(gen_type) {\n      if (gen_type != \"select\") {\n        return true;\n      }\n      return false;\n    }\n    /*validate_num_of_times: function(num_of_times) {\n      return isNaN(num_of_times);\n    },\n    validate_min: function(data_type, min, max) {\n      if (!isNaN(min)) {\n        if (!isNaN(max)) {\n          if (Number(min) < Number(max)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    validate_max: function(data_type, min, max) {\n      if (!isNaN(max)) {\n        if (!isNaN(min)) {\n          if (Number(min) < Number(max)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    preview_output_data: function() {}*/\n  },\n  computed: {\n    update_data_type: function() {\n      this.column_list.forEach(element => {\n        console.log(\"watch\");\n        if (element.data_type == \"integer\") {\n          if (isNaN(element.min)) {\n            element.min = 1;\n          }\n          if (isNaN(element.max)) {\n            element.max = 100;\n          }\n        } else if (element.data_type == \"varchar\") {\n          if (isNaN(element.min)) {\n            element.min = 1;\n          }\n          if (isNaN(element.max)) {\n            element.max = 100;\n          }\n        } else if (element.data_type == \"timestamp\") {\n          console.log(\"timestamp\");\n          if (Date.parse(element.min, \"yyyy/MM/dd HH:mm:ss\")) {\n            let d = new Date();\n            let year = d.getFullYear();\n            let month = d.getMonth() + 1;\n            let day = d.getDate();\n            let hour = \"00\";\n            let min = \"00\";\n            let sec = \"00\";\n            element.min =\n              year +\n              \"-\" +\n              month +\n              \"-\" +\n              day +\n              \" \" +\n              hour +\n              \":\" +\n              min +\n              \":\" +\n              sec;\n          }\n          if (Date.parse(element.max, \"yyyy/MM/dd HH:mm:ss\")) {\n            let d = new Date(element.min);\n            let year = d.getFullYear();\n            let month = d.getMonth() + 1;\n            let day = d.getDate();\n            let hour = \"00\";\n            let min = \"00\";\n            let sec = \"00\";\n            element.max =\n              year +\n              \"-\" +\n              month +\n              \"-\" +\n              day +\n              \" \" +\n              hour +\n              \":\" +\n              min +\n              \":\" +\n              sec;\n          }\n        }\n      });\n    },\n    update_collection: function() {}\n  },\n  to_timestamp: function(unix_time) {}\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}
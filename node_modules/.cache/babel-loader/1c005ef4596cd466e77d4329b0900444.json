{"remainingRequest":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/thread-loader/dist/cjs.js!/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/babel-loader/lib/index.js!/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/src/components/ColumnList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/src/components/ColumnList.vue","mtime":1560663225638},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'column-list',\n  data: function data() {\n    return {\n      table_name: \"\",\n      column_list: [],\n      data_types: [\"integer\", \"varchar\", \"boolean\", \"blob\", \"timestamp\"],\n      gen_types: [\"incremental\", \"random\"],\n      output_num: 100,\n      output_data: []\n    };\n  },\n  methods: {\n    //カラムを追加する\n    add_column: function add_column() {\n      console.log(this.data_types);\n      this.column_list.push({\n        'column_name': \"\",\n        'data_type': \"integer\",\n        'gen_type': \"incremental\",\n        'num_of_times': 1,\n        'min': \"1\",\n        'max': \"100\",\n        'not_null': false,\n        'primary_key': false\n      });\n      console.log(this.column_list.length);\n    },\n    //カラムを削除する\n    delete_column: function delete_column(event) {\n      console.log(event.target.id);\n      this.column_list.splice(event.target.id, 1);\n    },\n    //ダウンロードするSQLファイルを生成する\n    generate_sql_file: function generate_sql_file() {\n      var sql_stmt = this.create_sql_stmt();\n      var blob = new Blob([sql_stmt], {\n        type: 'text/sql'\n      });\n      var link = document.createElement('a');\n      link.href = window.URL.createObjectURL(blob);\n      link.download = 'create_data.sql';\n      link.click();\n    },\n    //テストデータを生成するSQLを生成\n    create_sql_stmt: function create_sql_stmt() {\n      var _this = this;\n\n      var sql_stmts = [];\n      var current_vals = {};\n      var sql_str = \"\"; //現在値と残りの繰り返し回数を保存しておく\n\n      this.column_list.forEach(function (element) {\n        current_vals[element.column_name] = {\n          'current_val': element.min,\n          'num_of_times': element.num_of_times\n        };\n      }); //\n      //console.log(\"output_num\")\n      //console.log(this.output_num)\n\n      for (var i = 0; i < this.output_num; i++) {\n        var line = 'INSERT INTO ' + this.table_name + ' VALUES (';\n        this.column_list.forEach(function (el) {\n          current_vals[el.column_name]['current_val'] = _this.get_next_val(current_vals[el.column_name]['current_val'], el.data_type, el.gen_type, el.min, el.max, el.num_of_times);\n          line += String(current_vals[el.column_name]['current_val']) + ',';\n        });\n        line += ');\\n';\n        sql_str += line;\n      }\n\n      return sql_str;\n    },\n\n    /*\n          get_vals: function (column, num) {\n              var values = []\n              var val = column['min']\n              for (var i = 0; i < num;){\n                  for (var j = 0; j < column['num_of_times'] && i < num; j++, i++){\n                        values.push(val)\n                  }\n                  val = get_val(val, column['data_type'])\n              }\n              return values\n          },\n    */\n    //生成するテストデータの次の値を取ってくる\n    get_next_val: function get_next_val(current_val, data_type, gen_type, min, max, num_of_times) {\n      if (data_type == 'integer') {\n        if (gen_type == 'random') {\n          return Math.floor(Math.random() * (min + max)) - min;\n        } else if (gen_type == 'incremental') {\n          return Number(current_val) + 1;\n        }\n      } else if (data_type == 'varchar') {\n        if (gen_type == 'random') {\n          var l = Math.floor(Math.random() * (min + max)) - min;\n          var c = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n          var cl = c.length;\n          var r = \"\";\n\n          for (var i = 0; i < l; i++) {\n            r += c[Math.floor(Math.random() * cl)];\n          }\n\n          return \"'\" + r + \"'\";\n        } else if (gen_type == 'incremental') {\n          return \"'\" + 'test' + String.toString(current_val + interval) + \"'\";\n        }\n      } else if (data_type == 'boolean') {\n        if (gen_type == 'random') {\n          return String(Math.random() < 0.5);\n        } else if (gen_type == 'incremental') {\n          return String(!current_val);\n        }\n      } else if (data_type == 'timestamp') {\n        if (gen_type == 'random') {\n          return String(current_val);\n        } else if (gen_type == 'incremental') {\n          return String(current_val);\n        }\n      } else if (data_type == 'blob') {\n        return String(current_val);\n      } else {\n        return \"\";\n      }\n    },\n    validate_num_of_times: function validate_num_of_times(num_of_times) {\n      return isNaN(num_of_times);\n    },\n    validate_min: function validate_min(data_type, min, max) {\n      if (!isNaN(min)) {\n        if (!isNaN(max)) {\n          if (Number(min) < Number(max)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    validate_max: function validate_max(data_type, min, max) {\n      if (!isNaN(max)) {\n        if (!isNaN(min)) {\n          if (Number(min) < Number(max)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    preview_output_data: function preview_output_data() {}\n  }\n};",{"version":3,"sources":["ColumnList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-container fluid>\n    <v-slide-y-transition mode=\"out-in\">\n        <v-layout column wrap>\n            <v-text-field label=\"table name\" v-model=\"table_name\"></v-text-field>\n            <v-btn fab dark color=\"indigo\">\n                <v-icon dark @click=\"add_column\">add</v-icon>\n            </v-btn>\n            <div v-for=\"column in column_list\" :key=\"column.key\">\n                <v-layout row justify-space-bet>\n                    <v-text-field label=\"column name\" v-model=\"column.column_name\"></v-text-field>\n                    <v-flex xs12 sm2 d-flex>\n                        <v-select :items=\"data_types\" v-model=\"column.data_type\" label=\"data type\" class=\"px-10\"></v-select>\n                    </v-flex>\n                    <v-flex xs12 sm2 d-flex>\n                        <v-select :items=\"gen_types\" v-model=\"column.gen_type\" label=\"output type\" class=\"px-10\"></v-select>\n                    </v-flex>\n                    <v-text-field label=\"number of times\" v-model=\"column.num_of_times\"></v-text-field>                    \n                    <v-text-field label=\"min\" v-model=\"column.min\"></v-text-field>\n                    <v-text-field label=\"max\" v-model=\"column.max\"></v-text-field>\n                    <v-checkbox label=\"not null\" v-model=\"column.not_null\"></v-checkbox>\n                    <v-checkbox label=\"primary key\" v-model=\"column.primary_key\"></v-checkbox>\n                    <v-btn fab dark color=\"indigo\">\n                        <v-icon dark :id=\"key\" @click=\"delete_column\">delete</v-icon>\n                    </v-btn>\n                </v-layout>\n            </div>\n            <v-text-field label=\"output data num\" v-model=\"output_num\"></v-text-field>\n            <v-layout justify-end>\n            <v-flex xs2>\n            <v-btn fab dark color=\"indigo\"> \n                <v-icon dark v-on:click=\"generate_sql_file\">arrow_downward</v-icon>\n            </v-btn>\n            </v-flex>\n            </v-layout>\n            <div v-for=\"column in column_list\" :key=\"column.key\"></div>\n        </v-layout>\n    </v-slide-y-transition>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  name: 'column-list',\n  data: function(){\n      return {\n        table_name: \"\",\n        column_list: [],\n        data_types: [\"integer\", \"varchar\", \"boolean\", \"blob\", \"timestamp\"],\n        gen_types: [\"incremental\", \"random\"],\n        output_num: 100,\n        output_data: []\n      }\n  },\n  methods: {\n      //カラムを追加する\n      add_column: function () {\n          console.log(this.data_types);\n          this.column_list.push({\n              'column_name': \"\",\n              'data_type': \"integer\",\n              'gen_type': \"incremental\",\n              'num_of_times': 1,\n              'min': \"1\",\n              'max': \"100\",\n              'not_null': false,\n              'primary_key': false\n          }) \n          console.log(this.column_list.length)\n      },\n      //カラムを削除する\n      delete_column: function (event) {\n        console.log(event.target.id)\n        this.column_list.splice(event.target.id, 1);\n      },\n      //ダウンロードするSQLファイルを生成する\n      generate_sql_file: function () {\n        var sql_stmt = this.create_sql_stmt()\n        let blob = new Blob([sql_stmt], { type: 'text/sql' })\n        let link = document.createElement('a')\n        link.href = window.URL.createObjectURL(blob)\n        link.download = 'create_data.sql'\n        link.click()\n      },\n      //テストデータを生成するSQLを生成\n      create_sql_stmt: function () {\n        var sql_stmts = []\n        var current_vals = {}\n        var sql_str = \"\"\n        //現在値と残りの繰り返し回数を保存しておく\n        this.column_list.forEach(element => {\n            current_vals[element.column_name] = {'current_val': element.min, 'num_of_times': element.num_of_times}\n        });\n        //\n        //console.log(\"output_num\")\n        //console.log(this.output_num)\n        for (var i = 0;  i < this.output_num;  i++) {\n            \n            let line = 'INSERT INTO ' + this.table_name + ' VALUES ('\n            this.column_list.forEach(el => {\n                current_vals[el.column_name]['current_val'] = this.get_next_val(current_vals[el.column_name]['current_val'], el.data_type, el.gen_type, el.min, el.max, el.num_of_times)\n                line += String(current_vals[el.column_name]['current_val']) + ','\n            })\n            line += ');\\n'\n            sql_str += line\n        }\n        return sql_str\n      },\n/*\n      get_vals: function (column, num) {\n          var values = []\n          var val = column['min']\n          for (var i = 0; i < num;){\n              for (var j = 0; j < column['num_of_times'] && i < num; j++, i++){\n                    values.push(val)\n              }\n              val = get_val(val, column['data_type'])\n          }\n          return values\n      },\n*/\n      //生成するテストデータの次の値を取ってくる\n      get_next_val: function (current_val, data_type, gen_type, min, max, num_of_times) {\n        if (data_type == 'integer'){\n            if (gen_type == 'random'){\n                return Math.floor( Math.random() * (min + max) ) - min;\n            }else if (gen_type == 'incremental'){\n                return Number(current_val) + 1;\n            }\n        } else if (data_type == 'varchar'){\n            if (gen_type == 'random'){\n                var l = Math.floor( Math.random() * (min + max) ) - min;\n                var c = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n                var cl = c.length\n                var r = \"\";\n                for(var i=0; i<l; i++){\n                    r += c[Math.floor(Math.random()*cl)];\n                }\n                return \"'\" + r + \"'\";\n            }else if(gen_type == 'incremental'){\n                return \"'\" + 'test' + String.toString(current_val + interval) + \"'\";\n            }\n        } else if (data_type == 'boolean'){\n            if(gen_type == 'random'){\n                return String(Math.random() < 0.5);\n            }else if(gen_type == 'incremental'){\n                return String(!current_val);\n            }\n        } else if (data_type == 'timestamp'){\n            if(gen_type == 'random'){\n                return String(current_val);\n            }else if(gen_type == 'incremental'){\n                return String(current_val);\n            }\n        } else if (data_type == 'blob'){\n            return String(current_val);\n        } else {\n            return \"\";\n        }\n      },\n      validate_num_of_times: function (num_of_times) {\n          return isNaN(num_of_times)\n      },\n      validate_min: function (data_type, min, max) {\n          if (!isNaN(min)){\n            if (!isNaN(max)){\n                if (Number(min) < Number(max)){\n                    return true\n                }\n            }\n          }\n          return false\n      },\n      validate_max: function (data_type, min, max) {\n        if (!isNaN(max)){\n            if (!isNaN(min)){\n                if (Number(min) < Number(max)){\n                    return true\n                }\n            }\n          }\n          return false\n      },\n      preview_output_data: function () {\n\n      }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"sourceRoot":"src/components"}]}
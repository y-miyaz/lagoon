{"remainingRequest":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/src/components/ColumnList.vue?vue&type=style&index=0&id=3e2df637&scoped=true&lang=scss&","dependencies":[{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/src/components/ColumnList.vue","mtime":1558157791989},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/usr/local/Cellar/node/8.1.0_1/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/cache-loader/dist/cjs.js","mtime":1535378940354},{"path":"/Users/Miyazaki/Dropbox/IdeaProjects/vue3.0/hello-world/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n",{"version":3,"sources":["ColumnList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ColumnList.vue","sourceRoot":"components","sourcesContent":["<template>\n  <v-container fluid>\n    <v-slide-y-transition mode=\"out-in\">\n        <v-layout column wrap>\n            <v-text-field label=\"table name\" v-model=\"table_name\"></v-text-field>\n            <v-btn fab dark color=\"indigo\">\n                <v-icon dark v-on:click=\"add_column\">add</v-icon>\n            </v-btn>\n            <div v-for=\"(column, key) in column_list\">\n                <v-layout row justify-space-bet>\n                    <v-text-field label=\"column name\" v-model=\"column.column_name\"></v-text-field>\n                    <v-flex xs12 sm2 d-flex><v-select :items=\"data_types\" v-model=\"column.data_type\" label=\"data type\" class=\"px-10\"></v-select></v-flex>\n                    <v-flex xs12 sm2 d-flex><v-select :items=\"output_types\" v-model=\"column.output_type\" label=\"output type\" class=\"px-10\"></v-select></v-flex>\n                    <v-text-field label=\"number of times\" v-model:value=\"column.num_of_times\"></v-text-field>                    \n                    <v-text-field label=\"min\" v-model=\"column.min\"></v-text-field>\n                    <v-text-field label=\"max\" v-model=\"column.max\"></v-text-field>\n                    <v-checkbox label=\"not null\" v-model=\"column.not_null\"></v-checkbox>\n                    <v-checkbox label=\"primary key\" v-model=\"column.primary_key\"></v-checkbox>\n                    <v-btn fab dark color=\"indigo\">\n                        <v-icon dark :id=\"key\" v-on:click=\"delete_column\">delete</v-icon>\n                    </v-btn>\n                </v-layout>\n            </div>\n            <v-text-field label=\"output data num\" :value=\"output_num\"></v-text-field>\n            <v-layout justify-end>\n            <v-flex xs2>\n            <v-btn fab dark color=\"indigo\"> \n                <v-icon dark v-on:click=\"generate_sql\">arrow_downward</v-icon>\n            </v-btn>\n            </v-flex>\n            </v-layout>\n            <div v-for=\"(column, key) in column_list\"></div>\n        </v-layout>\n    </v-slide-y-transition>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  name: 'column-list',\n  data: function(){\n      return {\n        table_name: \"\",\n        column_list: [],\n        data_types: [\"Integer\", \"varchar\", \"boolean\", \"blob\", \"timestamp\"],\n        output_types: [\"incremental\", \"random\"],\n        output_num: 1,\n        output_data: []\n      }\n  },\n  methods: {\n      add_column: function () {\n          this.column_list.push({\n              'column_name': \"\",\n              'data_type': \"\",\n              'output_type': \"\",\n              'num_of_times': 1,\n              'min': \"\",\n              'max': \"\",\n              'not_null': false,\n              'primary_key': false\n          }) \n          /*this.$set(this.column_list[this.column_list.length - 1], 'column_name', \"\")\n          this.$set(this.column_list[this.column_list.length - 1], 'data_type', \"\")\n          this.$set(this.column_list[this.column_list.length - 1], 'output_type', \"\")\n          this.$set(this.column_list[this.column_list.length - 1], 'num_of_times', 1)\n          this.$set(this.column_list[this.column_list.length - 1], 'min', \"\")\n          this.$set(this.column_list[this.column_list.length - 1], 'max', \"\")\n          this.$set(this.column_list[this.column_list.length - 1], 'not_null', false)\n          this.$set(this.column_list[this.column_list.length - 1], 'primary_key', false)*/\n      },\n      delete_column: function (event) {\n        console.log(event.target.id)\n        this.column_list.splice(event.target.id, 1);\n      },\n      generate_sql: function () {\n        var sql_stmt = this.create_sql_stmt()\n        let blob = new Blob([sql_stmt], { type: 'text/sql' })\n        let link = document.createElement('a')\n        link.href = window.URL.createObjectURL(blob)\n        link.download = 'create_data.sql'\n        link.click()\n      },\n      create_sql_stmt: function () {\n        var sql_str = \"\"\n        var sql_stmts = []\n        var output_vals = {}\n        this.column_list.forEach(el => {\n            output_vals[el.column_name] = this.get_val(el.min, this.output_num)\n        })\n        var val_pairs = []\n        for (var i = 0; i < column_vals[0].length; i++){\n            var val_pair = {}\n            for (key in column_vals){\n                val_pair[key] = column_vals[key][i]\n            }\n            val_pairs.push(val_pair)\n        }\n        for (var i = 0;  i < this.output_num;  i++) {\n            var line = 'INSERT INTO' + this.table_name + 'VALUES ('\n            val_pairs.forEach(el => {\n               line += get_value(el) + ','\n            })\n            line += ');'\n            sql_str += line\n        }\n        return sql_str\n      },\n      get_vals: function (column, num) {\n          var values = []\n          var val = column['min']\n          for (var i = 0; i < num;){\n              for (var j = 0; j < column['num_of_times'] && i < num; j++, i++){\n                    values.push(val)\n              }\n              val = get_val(val, column['data_type'])\n          }\n          return values\n      },\n      get_val: function (current_val, data_type) {\n        if (column['data_type_key'] == 'integer'){\n            return current_val++;\n        } else if (column['data_type'] == 'varchar'){\n            return current_val++;\n        } else if (column['data_type'] == 'boolean'){\n            return !current_val;\n        } else if (column['data_type'] == 'timestamp'){\n            return current_val++;\n        } else if (column['data_type'] == 'blob'){\n            return column['min'];\n        }\n      },\n      validate_num_of_times: function (num_of_times) {\n          return isNaN(num_of_times)\n      },\n      validate_min: function (data_type, min, max) {\n          if (!isNaN(min)){\n            if (!isNaN(max)){\n                if (Number(min) < Number(max)){\n                    return true\n                }\n            }\n          }\n          return false\n      },\n      validate_max: function (data_type, min, max) {\n        if (!isNaN(max)){\n            if (!isNaN(min)){\n                if (Number(min) < Number(max)){\n                    return true\n                }\n            }\n          }\n          return false\n      },\n      preview_output_data: function () {\n          //for(column in this.column_list) {\n\n          //}\n      }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}